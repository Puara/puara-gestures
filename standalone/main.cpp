
//********************************************************************************//
// Puara Gestures standalone - Receive OSC data to generate high-level            //
//                             gestural descriptors                               //
// https://github.com/Puara/puara-gestures                                        //
// Société des Arts Technologiques (SAT) - https://sat.qc.ca                      //
// Input Devices and Music Interaction Laboratory (IDMIL) - https://www.idmil.org //
// Edu Meneses (2024) - https://www.edumeneses.com                                //
//********************************************************************************//

#include "../puara_gestures.h"

#include <ossia/network/generic/generic_device.hpp>
#include <ossia/network/osc/osc.hpp>

#include <ossia/network/base/parameter_data.hpp>
#include <ossia/network/common/debug.hpp>

#include <iostream>

#include <vector>
#include <chrono>
#include <thread>

std::string client_ip = "127.0.0.1";
int client_port = 9000;
int local_port = 9001;
std::string device_name = "Puara_Gestures";

ossia::net::generic_device device {
    std::make_unique<ossia::net::osc_protocol>(
        client_ip, client_port, local_port), 
        device_name
};

puara_gestures::Shake3D shake;
puara_gestures::Jab3D jab;
puara_gestures::utils::LeakyIntegrator leakyintegrator;

#include <vector>

struct Coord3D {
    double x, y, z;
};

void testCalibration() {
    puara_gestures::utils::Calibration calibration;
    calibration.rawMagData = {{-121.563950,-118.791710,170.660980},
{-121.563950,-118.791710,170.660980},
{-121.563950,-118.791710,170.660980},
{-118.684692,-117.060112,171.849487},
{-118.684692,-117.060112,171.849487},
{-116.845161,-113.431999,172.189056},
{-116.845161,-113.431999,172.189056},
{-114.525764,-121.182968,167.859528},
{-114.525764,-121.182968,167.859528},
{-112.526283,-128.356750,173.717117},
{-112.526283,-128.356750,173.717117},
{-112.526283,-128.356750,173.717117},
{-101.409142,-132.067307,171.509918},
{-101.409142,-132.067307,171.509918},
{-75.095917,-138.251602,184.838043},
{-75.095917,-138.251602,184.838043},
{-30.227478,-122.914574,202.835251},
{-30.227478,-122.914574,202.835251},
{-30.227478,-122.914574,202.835251},
{29.277195,-92.570343,221.087128},
{29.277195,-92.570343,221.087128},
{93.900551,-48.043491,224.822403},
{93.900551,-48.043491,224.822403},
{148.206558,-1.537667,203.769058},
{148.206558,-1.537667,203.769058},
{148.206558,-1.537667,203.769058},
{190.035782,51.317356,170.660980},
{190.035782,51.317356,170.660980},
{208.990891,97.245979,124.903938},
{208.990891,97.245979,124.903938},
{218.988312,126.023521,85.683609},
{218.988312,126.023521,85.683609},
{218.988312,126.023521,85.683609},
{227.226181,135.258728,49.179844},
{227.226181,135.258728,49.179844},
{229.705551,140.288620,13.440111},
{229.705551,140.288620,13.440111},
{223.387177,146.637817,-3.113923},
{223.387177,146.637817,-3.113923},
{223.387177,146.637817,-3.113923},
{213.709671,158.181793,-20.771559},
{213.709671,158.181793,-20.771559},
{203.712250,162.716949,-36.052204},
{203.712250,162.716949,-36.052204},
{198.513580,169.066147,-51.163067},
{198.513580,169.066147,-51.163067},
{191.155487,171.869705,-53.370274},
{191.155487,171.869705,-53.370274},
{191.155487,171.869705,-53.370274},
{182.597687,172.364456,-64.745865},
{182.597687,172.364456,-64.745865},
{174.039902,180.445251,-68.650917},
{174.039902,180.445251,-68.650917},
{161.083252,186.052338,-67.207748},
{161.083252,186.052338,-67.207748},
{161.083252,186.052338,-67.207748},
{154.524918,192.648911,-63.132908},
{154.524918,192.648911,-63.132908},
{150.765900,196.936676,-67.207748},
{150.765900,196.936676,-67.207748},
{150.765900,194.545410,-62.708447},
{150.765900,194.545410,-62.708447},
{150.605942,195.287521,-58.973175},
{150.605942,195.287521,-58.973175},
{150.605942,195.287521,-58.973175},
{150.445984,198.255981,-57.275326},
{150.445984,198.255981,-57.275326},
{147.086853,201.306900,-56.596188},
{147.086853,201.306900,-56.596188},
{137.089417,206.089401,-62.283981},
{137.089417,206.089401,-62.283981},
{137.089417,206.089401,-62.283981},
{124.772598,210.871918,-65.425003},
{124.772598,210.871918,-65.425003},
{111.496017,220.107132,-65.170326},
{111.496017,220.107132,-65.170326},
{95.180214,228.105469,-63.642262},
{95.180214,228.105469,-63.642262},
{95.180214,228.105469,-63.642262},
{70.626541,238.742447,-61.774628},
{70.626541,238.742447,-61.774628},
{40.234371,247.977646,-49.040756},
{40.234371,247.977646,-49.040756},
{4.083684,252.595245,-35.203281},
{4.083684,252.595245,-35.203281},
{4.083684,252.595245,-35.203281},
{-35.106220,249.709259,-12.282310},
{-35.106220,249.709259,-12.282310},
{-75.255875,243.772339,8.940809},
{-75.255875,243.772339,8.940809},
{-109.647018,228.105469,26.768230},
{-109.647018,228.105469,26.768230},
{-137.799774,213.840378,38.738071},
{-137.799774,213.840378,38.738071},
{-137.799774,213.840378,38.738071},
{-140.359116,201.801636,52.915115},
{-140.359116,201.801636,52.915115},
{-152.036102,184.320724,72.440384},
{-152.036102,184.320724,72.440384},
{-163.473160,157.604614,93.833290},
{-163.473160,157.604614,93.833290},
{-163.473160,157.604614,93.833290},
{-172.990707,117.035698,113.018990},
{-172.990707,117.035698,113.018990},
{-177.869446,82.568619,129.912598},
    };

    calibration.generateMagnetometerMatrices();
    // std::cout << calibration.softIronMatrix << std::endl;
    // std::cout << calibration.hardIronBias << std::endl;

}

auto cb = [](ossia::string_view unhandled_node, const ossia::value& unhandled_value) {
    std::cout 
        << "Received unhandled message (" 
        << unhandled_node << " => " 
        << ossia::value_to_pretty_string(unhandled_value) <<  ")."
        << std::endl; 
    };

int main(int argc, char* argv[]) {

    // creating response for unhandled messages
    device.on_unhandled_message.connect(&cb);

    // creating accelerometer 3D node
    auto& accelNode = find_or_create_node(device, "/puaragestures/accel3D");
    auto accelParam = accelNode.create_parameter(ossia::val_type::LIST);
    accelParam->add_callback([&](const ossia::value& v) {
        std::cout << "New accelerometer value received: " << ossia::value_to_pretty_string(v) << std::endl;
        ossia::vec3f accelerometer = ossia::convert<ossia::vec3f>(v);
        shake.update(accelerometer[0], accelerometer[1], accelerometer[2]);
        jab.update(accelerometer[0], accelerometer[1], accelerometer[2]);
        leakyintegrator.integrate(accelerometer[0]);
    });
    testCalibration();
    // while(true) {
    //     puara_gestures::Coord3D shakeout = shake.current_value();
    //     puara_gestures::Coord3D jabout = jab.current_value(); 
    //     std::cout << "Shake X: " << shakeout.x << ", Jab X: " << jabout.x << ", Integrator: " << leakyintegrator.current_value << std::endl;
    //     std::this_thread::sleep_for(std::chrono::milliseconds(10));
    // };
}


